{"ast":null,"code":"var _jsxFileName = \"/Users/anneso/Documents/De\\u0301veloppement/GitHub/Todolist-React-App/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Todolist from \"./components/Todolist\";\nimport { nanoid } from 'nanoid';\nimport { useState, useEffect } from \"react\";\nimport StorageService from \"./services/StorageService\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit } from '@fortawesome/free-solid-svg-icons';\nimport DarkModeToggle from './components/DarkModeToggle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [todolists, setTodolists] = useState([]);\n  useEffect(() => {\n    const data = StorageService.getTodolists();\n    setTodolists(data);\n  }, []);\n  useEffect(() => {\n    StorageService.saveTodolists(todolists);\n  }, [todolists]);\n\n  function updateTodo(todoUpdated) {\n    let pos = todolists.findIndex(todo => todo.id === todoUpdated.id);\n\n    if (pos > -1) {\n      todolists.splice(pos, 1, todoUpdated);\n      setTodolists([...todolists]);\n    }\n  }\n\n  function addList(params) {\n    const newList = {\n      id: nanoid(),\n      title: \"Nouvelle liste\",\n      tasks: []\n    };\n    setTodolists([newList, ...todolists]);\n  }\n\n  function deleteTodo(todoDeleted) {\n    let pos = todolists.findIndex(todo => todo.id === todoDeleted.id);\n\n    if (pos > -1) {\n      todolists.splice(pos, 1);\n      setTodolists([...todolists]);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"TodoApp\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"createList-btn\",\n          onClick: addList,\n          children: [\"Cr\\xE9er une liste\", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faEdit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 79\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DarkModeToggle, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todolist-container\",\n      children: todolists.map(todo => /*#__PURE__*/_jsxDEV(Todolist, {\n        todo: todo,\n        updateTodo: updateTodo,\n        deleteTodo: deleteTodo\n      }, todo.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"P3oRoKFdEDmlwhpOsvzIOxjHmX4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/anneso/Documents/Développement/GitHub/Todolist-React-App/src/App.js"],"names":["Todolist","nanoid","useState","useEffect","StorageService","FontAwesomeIcon","faEdit","DarkModeToggle","App","todolists","setTodolists","data","getTodolists","saveTodolists","updateTodo","todoUpdated","pos","findIndex","todo","id","splice","addList","params","newList","title","tasks","deleteTodo","todoDeleted","map"],"mappings":"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","sourcesContent":["import Todolist from \"./components/Todolist\";\nimport { nanoid } from 'nanoid';\nimport { useState, useEffect } from \"react\";\nimport StorageService from \"./services/StorageService\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit } from '@fortawesome/free-solid-svg-icons';\nimport DarkModeToggle from './components/DarkModeToggle';\n\nfunction App() {\n  const [todolists, setTodolists] = useState([]);\n\n  useEffect(() => {\n    const data = StorageService.getTodolists();\n    setTodolists(data);\n  }, [])\n\n  useEffect(() => {\n    StorageService.saveTodolists(todolists);\n  }, [todolists])\n\n  function updateTodo(todoUpdated) {\n    let pos = todolists.findIndex((todo => todo.id === todoUpdated.id));\n    if (pos > -1) {\n      todolists.splice(pos, 1, todoUpdated);\n      setTodolists([...todolists]);\n    }\n  }\n\n  function addList(params) {\n    const newList = {\n      id: nanoid(),\n      title: \"Nouvelle liste\",\n      tasks: []\n    }\n    setTodolists([newList, ...todolists]);\n  }\n\n  function deleteTodo(todoDeleted) {\n    let pos = todolists.findIndex((todo) => todo.id === todoDeleted.id);\n    if (pos > -1) {\n      todolists.splice(pos, 1);\n      setTodolists([...todolists]);\n    }\n  }\n\n  return (\n    <main>\n      <header>\n        <h1>TodoApp</h1>\n        <div>\n          <button className=\"createList-btn\" onClick={addList}>Créer une liste<FontAwesomeIcon icon={faEdit} /></button>\n          <DarkModeToggle />\n        </div>\n      </header>\n      <div className=\"todolist-container\">\n        {todolists.map((todo) => (\n          <Todolist key={todo.id} todo={todo} updateTodo={updateTodo} deleteTodo={deleteTodo} />\n        ))}\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}